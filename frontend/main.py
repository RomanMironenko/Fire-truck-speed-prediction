"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: Frontend —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
–í–µ—Ä—Å–∏—è: 0.1
"""

import os
import streamlit as st
import yaml
from src.data.get_data import get_dataset
from src.plotting.charts import displot_bar, boxplot_bar
from src.train.training import start_training
from src.evaluate.evaluate import evaluate_input

config_path = "../config/params.yml"


def main_page():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    """
    st.image(
        "https://avatars.mds.yandex.net/i?id=c84c438ebf8ddd097d779feec1bd666b201c2958-8270623-images-thumbs&n=13",
        width=600,
    )

    st.markdown("# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    st.title("MLOps project:  Fire truck speed prediction üî• üöí")
    st.write(
        """
       ."""
    )

    # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
    st.markdown(
        """
        ### –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π 
            - Model - –ú–æ–¥–µ–ª—å –ø–æ–∂–∞—Ä–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            - Days_of_the_week - –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—Ç–æ—Ä–Ω–∏–∫ –∏ —Ç.–ø.) 
            - Day_type - –¢–∏–ø –¥–Ω—è (–†–∞–±–æ—á–∏–π –¥–µ–Ω—å, –ø—Ä–µ–¥ –Ω–µ—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å)
            - Pickup_hour: –ß–∞—Å –≤—ã–µ–∑–¥–∞
    """
    )


def exploratory():
    """
    Exploratory data analysis
    """
    st.markdown("# Exploratory data analysisÔ∏è")

    with open(config_path) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    # –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    data = get_dataset(dataset_path=config["backend"]["train"])
    st.write(data.head())

    # –≥—Ä–∞—Ñ–∏–∫ —Å checkbox
    displot = st.sidebar.checkbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏")
    speed_week = st.sidebar.checkbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    speed_week_auto = st.sidebar.checkbox(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
    )
    speed_hour = st.sidebar.checkbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è")
    speed_type_days = st.sidebar.checkbox(
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ —Ä–∞–±–æ—á–∏–π, –Ω–µ —Ä–∞–±–æ—á–∏–π, –ø—Ä–µ–¥ –Ω–µ —Ä–∞–±–æ—á–∏–π"
    )
    speed_type_auto = st.sidebar.checkbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

    if displot:
        st.pyplot(
            displot_bar(
                data=data,
                col="speed_km/h",
                bins=100,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏",
            )
        )
        st.markdown(
            """
             **–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ**
            """)
    if speed_week:
        st.pyplot(
            boxplot_bar(
                data=data,
                x_data="days_of_the_week",
                y_data="speed_km/h",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏",
            )
        )
        st.markdown(
            """
             **–ù–∞–∏–±–æ–ª—å—à–∞—è —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –≤ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ**
            """)
    if speed_week_auto:
        st.pyplot(
            boxplot_bar(
                data=data,
                x_data="days_of_the_week",
                y_data="speed_km/h",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                hue="type_auto",
            )
        )
        st.markdown(
            """
             **–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –Ω–æ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. 
             –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ª–µ–∂–∞—Ç –≤ —É–∑–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏**
            """)
    if speed_hour:
        st.pyplot(
            boxplot_bar(
                data=data,
                x_data="pickup_hour",
                y_data="speed_km/h",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è",
            )
        )
        st.markdown(
            """
             **–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 6 —á–∞—Å–æ–≤ –≤–æ–∑—Ä–∞—Å—Ç–∞–µ—Ç, –ø–æ—Å–ª–µ 6 —á –¥–æ 8 —á –ø–∞–¥–∞–µ—Ç, —Å 9 —á –ø–æ 17 —á 
             –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è, 18 —á –ø–∞–¥–∞–µ—Ç –∏ –¥–æ 23 —á –ø—Ä–æ–∏—Ö–æ–¥–∏—Ç –ø–ª–∞–Ω–∞–º–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç**
            """)
    if speed_type_days:
        st.pyplot(
            boxplot_bar(
                data=data,
                x_data="day_type",
                y_data="speed_km/h",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ —Ä–∞–±–æ—á–∏–π, –Ω–µ —Ä–∞–±–æ—á–∏–π, –ø—Ä–µ–¥ –Ω–µ —Ä–∞–±–æ—á–∏–π",
            )
        )
        st.markdown(
            """
             **–ù–∞–∏–±–æ–ª—å—à–∞—è —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è –≤ –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, 
             –Ω–∞–∏–º–µ–Ω—å—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –ø—Ä–µ–¥ –Ω–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å**
            """)
    if speed_type_auto:
        st.pyplot(
            boxplot_bar(
                data=data,
                x_data="type_auto",
                y_data="speed_km/h",
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
            )
        )
        st.markdown(
            """
             **–ù–∞–∏–±–æ–ª—å—à–∞—è —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Ç–∏–ø–∞ –ê–°–ê –ø–æ—Ç–æ–º —É –ê–¶/–ê–ù–†, –∞ –∑–∞—Ç–µ–º —É –ê–õ/–ê–ö–ü**
            """)


def training():
    """
    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
    """
    st.markdown("# Training model LightGBM")

    # –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with open(config_path) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    # endpoint
    endpoint = config["endpoints"]["train"]

    if st.button("Start training"):
        start_training(config=config, endpoint=endpoint)


def prediction():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    st.markdown("# Prediction")
    with open(config_path) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config["endpoints"]["predict_input"]
    unique_data_path = config["backend"]["train"]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if os.path.exists(config["backend"]["model_path"]):
        evaluate_input(unique_data_path=unique_data_path, endpoint=endpoint)
    else:
        st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")


def main():
    """
    –°–±–æ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
    """
    page_names_to_funcs = {
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": main_page,
        "Exploratory data analysis": exploratory,
        "Training": training,
        "Prediction": prediction,
    }
    selected_page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç", page_names_to_funcs.keys())
    page_names_to_funcs[selected_page]()


if __name__ == "__main__":
    main()
